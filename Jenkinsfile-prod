pipeline {
  agent {any}
  environment {
    def DOCKER_TAG = "CS1-Prod-${BUILD_NUMBER}"
    DOCKER_REGISTRY = "<docker_registry_URL>"
    DOCKER_REPO = "<docker_repo_name>"
    WEBHOOK_URL = credentials('My_Teams_notification')
  }

    stages {
      stage ('Checkout'){
            steps{
              withCredentials([gitUsernamePassword(credentialsId: '', gitToolName: 'Default')]) {
              checkout scm
              }
            }
          }

    stage('SonarQube analysis') {
        steps {
          script{
            // requires SonarQube Scanner 2.8+
            def scannerHome = tool 'SonarQube-Scanner';
            withSonarQubeEnv('sonarqube-<Workspace>') {
              sh "${scannerHome}/bin/sonar-scanner"
              sh "pwd"
                }
              }
            }
          }
    
      stage("Quality gate") {
            steps {
              script{
                sleep 120
                timeout(time: 5, unit: 'MINUTES') {
                def qg = waitForQualityGate() 
                if (qg.status != 'OK') {
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
                else{
                  echo "Quality Gate Passed"
            }
        }
              
        }}
        
        post {
            always{
              script {
                  currentBuild.fullDisplayName = "${BUILD_NUMBER}-${NODE_NAME}"
                    }
                }
            failure {
                mail to: '<mail-DL>',
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "In ${env.BUILD_NUMBER} there is no required code coverage, so pipeline has failed "
            }
        }
                
        }


      stage('Build Docker image') {

        steps {
          withCredentials([file(credentialsId: '<credential-name-in-jenkins>', variable: 'SECRETS_FILE')]) {
            // adding enviorment variable taken form the aws secrete manager
            script{
              dir("${env.WORKSPACE}/app"){
                  if (fileExists('.env')) {
                      sh "rm -rf .env"
                  }
                  sh "touch .env"
                  sh "cp ${SECRETS_FILE} .env"
              }   
              // Build Docker image
              sh "docker build -t $DOCKER_REGISTRY/$DOCKER_REPO:$DOCKER_TAG ." 
        }}}}

      stage('Trivy image scanning') {
        steps{
          script{
          // scanning the image for vulnerabilities          
          sh "trivy --no-progress --exit-code 1 --severity HIGH, CRITICAL <imageTag_name>"
              }   
            }
        }

      
      stage('Pushing Docker image Registry') {

        steps {
          withCredentials([file(credentialsId: '<credential-name-in-jenkins>', variable: 'SECRETS_FILE')]) {
            // Image pushing to AWS ECR
              sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 509781749212.dkr.ecr.us-east-1.amazonaws.com"
              sh "docker push $DOCKER_REGISTRY/$DOCKER_REPO:$DOCKER_TAG"
              dir("${env.WORKSPACE}/app"){
                  sh "rm -rf .env"
                  }
      
        }}}}

      stage('Remove docker image from local') {
        steps{
          script{
          // removing images form local cleaning up the storage
          
          sh "docker rmi \$(docker images -q) -f"
        
          }   
        }
      }

      stage('Approve based on environment lead') {
	            input {
	                message 'Please Review and approve for deployment in prod environment'
	                id 'envId'
	                ok 'Approve'
	                submitterParameter 'approverId'
	                parameters {
	                    choice choices: ['Prod'], name: 'envType'
	                }
	            }

	            steps {
	                echo "Deployment approved to ${envType} by ${approverId}."

	            }
	        }

      stage('Application deployment') {
        steps{
          script{
            dir("/root/newhelm/<folder_name>") {
                      withKubeConfig(
                          caCertificate: '',
                          clusterName: 'cluster_Name',
                          contextName: '',
                          credentialsId: 'kubeconfig',
                          namespace: 'default',
                          restrictKubeConfigAccess: true,
                          serverUrl: ''
                      ) {
                          sh "aws eks update-kubeconfig --name <Cluster_Name>"
                          sh "kubectl get pods"
                          sh "helm list"
                          echo "the given docker image tag is ------->>>${DOCKER_TAG}"
                          sh "helm upgrade <deployment_name> . --set image.tag=${DOCKER_TAG}"
                          sh "kubectl get pods"
                          sh "rm -rf .kube"
                      }
                  }
          }
        }
      }    
    }
    post {
          always{
              script {
                  currentBuild.displayName = "${BUILD_NUMBER}-${NODE_NAME}/${DOCKER_TAG}"
              }
          }
      
          success{
              script {
                  emailext mimeType: 'text/html',
                  to: '<mail>',
                  subject: "${BUILD_NUMBER}-${JOB_NAME}-${NODE_NAME}",
                  body: '${JELLY_SCRIPT,template="html"}'
              }
          }
      
          failure{
              script {
                  emailext mimeType: 'text/html',
                      to: '<mail>',
                      subject: "${BUILD_NUMBER}-${JOB_NAME}-${NODE_NAME}",
                      body: '${JELLY_SCRIPT,template="html"}'
                  
              }
          }
      }
}